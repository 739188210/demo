<!--
    Document Structure:
    configuration -> appender(0-n) -> logger(0-n) -> root (0-1)
-->

<!--
    当存在多个配置文件时， 可以通过<include> 标签的属性file/resource/url 来引入子配置文件。
    note： 自配置文件应以<included>标签包裹而非<configuration>
    子配置文件为可选时，可通过属性optional = "true" 来屏蔽自配置文件不存在时，logback的日志输出
-->


<!-- scan="true"允许扫描其配置文件中的更改，并在配置文件更改时自动重新配置自己。
     scanPeriod="30 seconds" 扫描周期， 默认1min
     开启 单独线程 定期执行任务ReconfigureOnChangeTask 扫描配置文件变更。
     -->

<configuration scan="true" scanPeriod="30 seconds">
    <!-- 注册状态监听器  -等同于debug="true"  -->
    <!-- 注册状态监听器后，会禁用默认的内部状态信息打印
        OnConsoleStatusListener 在控制台上打印传入的状态消息，即在 System.out 上。
        OnErrorConsoleStatusListener 在 System.err 上打印传入的状态消息。
        NopStatusListener 丢弃传入的状态消息。
        -->
    <!--    <statusListener class = "ch.qos.logback.core.status.OnErrorConsoleStatusListener" />-->

    <!-- 记录器上下文的名称默认为default， 可通过声明标签<contextName>，并配置附加器的编码器中的布局模式下添加%contextName 修改记录器上下文名称 -->
    <contextName>myKafkaLogger</contextName>

    <!-- property 声明变量及引用
         scope 变量的作用域 属性允许“local”(本地)、“context”(上下文)和“system”(系统属性)， 默认为local
         <property>、<define>、<insertFromJNDI> 元素可设置属性的范围
         在替换期间，首先在本地范围内查找属性，然后在上下文范围内查找，然后在系统属性范围内查找，最后在操作系统环境中查找。
         变量配置多时，可以通过 file 引入文件配置 或 resource 引入资源
         变量可以通过 :- 运算符配置默认值 eg. ${aName:-golden}  ， userid=“alice” -> ${id :- ${userid}}
     -->
    <property name="USER_HOME" value="F:\\logbackLogs" scope="local"/>
    <!--    <property file="src/main/java/chapters/configuration/variables1.properties" />-->
    <!--    <property resource="resource1.properties" />-->

    <!-- appender 附加器 与 Layout接口 同属于 log-core
         appender 配置日志记录请求打印到的目的地
         appender 可以包含零个或一个<layout>元素、零个或多个 <encoder>元素和零个或多个 <filter>元素。
     -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 默认编码器（encoder）类型
         ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder>
            <!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <outputPatternAsHeader>true</outputPatternAsHeader>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <!-- <file> 指定日志输出目的地 -->
        <file>${USER_HOME}\text.log</file>
        <encoder>
            <pattern>%date %level [%thread] %logger{10} [%file:%line] %msg%n</pattern>
        </encoder>
        <!-- 文件存在时，是否追加 -->
        <append>false</append>
        <!-- 将 immediateFlush 设置为 false 以获得更高的日志记录吞吐量 -->
        <immediateFlush>true</immediateFlush>
    </appender>

    <!-- logger 记录器  具有层级集成(级别集成),遵循就近原则
         eg. the logger named "com.foo" is a parent of the logger named "com.foo.Bar"
            the logger named "java" is a parent of "java.util" and an ancestor of "java.util.Vector"
         eg
            Logger name	Assigned level	Effective level
            root	        DEBUG	        DEBUG
            X	            INFO	        INFO
            X.Y	            none	        INFO
            X.Y.Z	        none	        INFO
         一个记录器可以附加多个附加器， 子记录器会继承父记录器的appender 直到root或可加性标志为false的祖先
         一个<logger>元素只需要一个强制名称属性、一个可选 级别属性和一个可选可加性属性.
         additivity="false" 设置记录器的附加器可加性标志为false，则不会继承其父类附加器，默认为true。
            -->
    <logger name="com.cloud.kafkasty" level="INFO" additivity="false">
        <appender-ref ref="FILE"/>
    </logger>
    <logger name="com.cloud.kafkasty.KafkaFir" level="debug"/>


    <!-- root 可以理解为一个特殊的根记录器 包含零个或多个 <appender-ref>元素 -->
    <root level="info">
        <appender-ref ref="STDOUT"/>

    </root>


    <!--
     <define> 用于动态定义属性
     name 指定属性的名称
     class 指定属性实现PropertyDefiner 接口的类
     -->
    <!--    <define name="rootLevel" class="com.cloud.logback.definedemo.MYPropertyDefiner">-->
    <!--        <shape>round</shape>-->
    <!--        <color>brown</color>-->
    <!--        <size>24</size>-->
    <!--    </define>-->
</configuration>